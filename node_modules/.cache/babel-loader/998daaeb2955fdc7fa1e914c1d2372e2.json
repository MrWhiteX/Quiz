{"ast":null,"code":"var _jsxFileName = \"/home/bartek/Pulpit/nowy katalog 2/src/components/QuestionCard.tsx\";\nimport React from 'react'; // Types\n\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionCard = _ref => {\n  let {\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"number\",\n      children: [\"Question: \", questionNr, \" / \", totalQuestions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: {\n        __html: question\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: answers.map(answer => /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        correct: (userAnswer === null || userAnswer === void 0 ? void 0 : userAnswer.correctAnswer) === answer,\n        userClicked: (userAnswer === null || userAnswer === void 0 ? void 0 : userAnswer.answer) === answer,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: userAnswer ? true : false,\n          value: answer,\n          onClick: callback,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: answer\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, answer, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_c = QuestionCard;\nexport default QuestionCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionCard\");","map":{"version":3,"sources":["/home/bartek/Pulpit/nowy katalog 2/src/components/QuestionCard.tsx"],"names":["React","Wrapper","ButtonWrapper","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","__html","map","answer","correctAnswer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AAEA;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,uBAAvC;;;AAWA,MAAMC,YAA6B,GAAG;AAAA,MAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,UAA/B;AAA2CC,IAAAA,UAA3C;AAAuDC,IAAAA;AAAvD,GAAD;AAAA,sBAClC,QAAC,OAAD;AAAA,4BACI;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA,+BACeD,UADf,SAC8BC,cAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAG,MAAA,uBAAuB,EAAE;AAAEC,QAAAA,MAAM,EAAEN;AAAV;AAA5B;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,gBACKC,OAAO,CAACM,GAAR,CAAaC,MAAD,iBACT,QAAC,aAAD;AAEI,QAAA,OAAO,EAAE,CAAAL,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEM,aAAZ,MAA8BD,MAF3C;AAGI,QAAA,WAAW,EAAE,CAAAL,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEK,MAAZ,MAAuBA,MAHxC;AAAA,+BAKI;AAAQ,UAAA,QAAQ,EAAEL,UAAU,GAAG,IAAH,GAAU,KAAtC;AAA6C,UAAA,KAAK,EAAEK,MAApD;AAA4D,UAAA,OAAO,EAAEN,QAArE;AAAA,iCACI;AAAM,YAAA,uBAAuB,EAAE;AAAEI,cAAAA,MAAM,EAAEE;AAAV;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AALJ,SACSA,MADT;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADkC;AAAA,CAAtC;;KAAMT,Y;AAsBN,eAAeA,YAAf","sourcesContent":["import React from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNr, totalQuestions }) => (\n    <Wrapper>\n        <p className=\"number\">\n            Question: {questionNr} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{ __html: question }} />\n        <div>\n            {answers.map((answer) => (\n                <ButtonWrapper\n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}\n                >\n                    <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n);\n\nexport default QuestionCard;\n"]},"metadata":{},"sourceType":"module"}