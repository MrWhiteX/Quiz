{"ast":null,"code":"var _jsxFileName = \"/home/bartek/Pulpit/nowy katalog 2/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API'; // Components\n\nimport QuestionCard from './components/QuestionCard'; // types\n\n// Styles\nimport { GlobalStyle, Wrapper, DifficultyWrapper } from './App.styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addQuestions, getGameOver, getLoading, getQuestion, setGameOver, setLoading, setDifficultyLevel, getDifficultyLevel } from './store/toDoQuiz';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  _s();\n\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const dispatch = useDispatch();\n  const questions = useSelector(getQuestion);\n  const loading = useSelector(getLoading);\n  const gameOver = useSelector(getGameOver);\n  const difficultyLevel = useSelector(getDifficultyLevel);\n\n  const startTrivia = async () => {\n    dispatch(setLoading(true));\n    dispatch(setGameOver(false));\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, difficultyLevel);\n    dispatch(addQuestions(newQuestions));\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    dispatch(setLoading(false));\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value; // Check answer against correct answer\n\n      const correct = questions[number].correct_answer === answer; // Add score if answer is correct\n\n      if (correct) setScore(prev => prev + 1); // Save the answer in the array for user answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      dispatch(setGameOver(false));\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"HAPPY QUIZ\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startTrivia,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 30\n      }, this) : null, loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 28\n      }, this) : null, !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questionNr: number + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[number].question,\n        answers: questions[number].answers,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this) : null, gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(DifficultyWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Level of Difficulty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: e => dispatch(setDifficultyLevel(e.target.value)),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"easy\",\n              children: \"Easy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"medium\",\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"hard\",\n              children: \"Hard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"y3NhNfI5scO1lEW9gaMJ5frFRjQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/bartek/Pulpit/nowy katalog 2/src/App.tsx"],"names":["React","useState","fetchQuizQuestions","QuestionCard","GlobalStyle","Wrapper","DifficultyWrapper","useDispatch","useSelector","addQuestions","getGameOver","getLoading","getQuestion","setGameOver","setLoading","setDifficultyLevel","getDifficultyLevel","TOTAL_QUESTIONS","App","number","setNumber","userAnswers","setUserAnswers","score","setScore","dispatch","questions","loading","gameOver","difficultyLevel","startTrivia","newQuestions","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","nextQ","length","answers","undefined","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// types\nimport { QuestionsState } from './API';\n// Styles\nimport { GlobalStyle, Wrapper, DifficultyWrapper } from './App.styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    addQuestions,\n    getGameOver,\n    getLoading,\n    getQuestion,\n    setGameOver,\n    setLoading,\n    setDifficultyLevel,\n    getDifficultyLevel,\n} from './store/toDoQuiz';\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC = () => {\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n\n    const dispatch = useDispatch();\n    const questions = useSelector(getQuestion);\n    const loading = useSelector(getLoading);\n    const gameOver = useSelector(getGameOver);\n    const difficultyLevel = useSelector(getDifficultyLevel);\n\n    const startTrivia = async () => {\n        dispatch(setLoading(true));\n        dispatch(setGameOver(false));\n        const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, difficultyLevel);\n        dispatch(addQuestions(newQuestions));\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        dispatch(setLoading(false));\n    };\n\n    const checkAnswer = (e: any) => {\n        if (!gameOver) {\n            // User's answer\n            const answer = e.currentTarget.value;\n            // Check answer against correct answer\n            const correct = questions[number].correct_answer === answer;\n            // Add score if answer is correct\n            if (correct) setScore((prev) => prev + 1);\n            // Save the answer in the array for user answers\n            const answerObject = {\n                question: questions[number].question,\n                answer,\n                correct,\n                correctAnswer: questions[number].correct_answer,\n            };\n            setUserAnswers((prev) => [...prev, answerObject]);\n        }\n    };\n\n    const nextQuestion = () => {\n        // Move on to the next question if not the last question\n        const nextQ = number + 1;\n\n        if (nextQ === TOTAL_QUESTIONS) {\n            dispatch(setGameOver(false));\n        } else {\n            setNumber(nextQ);\n        }\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <Wrapper>\n                <h1>HAPPY QUIZ</h1>\n                {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n                    <button className=\"start\" onClick={startTrivia}>\n                        Start\n                    </button>\n                ) : null}\n                {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n                {loading ? <p>Loading Questions...</p> : null}\n                {!loading && !gameOver && (\n                    <QuestionCard\n                        questionNr={number + 1}\n                        totalQuestions={TOTAL_QUESTIONS}\n                        question={questions[number].question}\n                        answers={questions[number].answers}\n                        userAnswer={userAnswers ? userAnswers[number] : undefined}\n                        callback={checkAnswer}\n                    />\n                )}\n                {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n                    <button className=\"next\" onClick={nextQuestion}>\n                        Next Question\n                    </button>\n                ) : null}\n                {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n                    <DifficultyWrapper>\n                        <h2>Level of Difficulty</h2>\n                        <form>\n                            <select onChange={(e) => dispatch(setDifficultyLevel(e.target.value))}>\n                                <option value=\"easy\">Easy</option>\n                                <option value=\"medium\">Medium</option>\n                                <option value=\"hard\">Hard</option>\n                            </select>\n                        </form>\n                    </DifficultyWrapper>\n                ) : null}\n            </Wrapper>\n        </>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}